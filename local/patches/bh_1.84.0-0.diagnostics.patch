diff --git a/inst/include/boost/asio/detail/push_options.hpp b/inst/include/boost/asio/detail/push_options.hpp
index 8c3982a7..9d85645f 100644
--- a/inst/include/boost/asio/detail/push_options.hpp
+++ b/inst/include/boost/asio/detail/push_options.hpp
@@ -61,9 +61,9 @@
 # endif // !defined(_WIN32) && !defined(__WIN32__) && !defined(WIN32)
 
 # pragma GCC diagnostic push
-# pragma GCC diagnostic ignored "-Wnon-virtual-dtor"
+//# pragma GCC diagnostic ignored "-Wnon-virtual-dtor"
 # if (__clang_major__ >= 6)
-#  pragma GCC diagnostic ignored "-Wzero-as-null-pointer-constant"
+//#  pragma GCC diagnostic ignored "-Wzero-as-null-pointer-constant"
 # endif // (__clang_major__ >= 6)
 
 # pragma push_macro ("emit")
@@ -102,12 +102,12 @@
 # endif // (__GNUC__ == 4 && __GNUC_MINOR__ >= 1) || (__GNUC__ > 4)
 
 # pragma GCC diagnostic push
-# pragma GCC diagnostic ignored "-Wnon-virtual-dtor"
+//# pragma GCC diagnostic ignored "-Wnon-virtual-dtor"
 # if (__GNUC__ == 4 && __GNUC_MINOR__ >= 7) || (__GNUC__ > 4)
-#  pragma GCC diagnostic ignored "-Wzero-as-null-pointer-constant"
+//#  pragma GCC diagnostic ignored "-Wzero-as-null-pointer-constant"
 # endif // (__GNUC__ == 4 && __GNUC_MINOR__ >= 7) || (__GNUC__ > 4)
 # if (__GNUC__ >= 7)
-#  pragma GCC diagnostic ignored "-Wimplicit-fallthrough"
+//#  pragma GCC diagnostic ignored "-Wimplicit-fallthrough"
 # endif // (__GNUC__ >= 7)
 
 # pragma push_macro ("emit")
diff --git a/inst/include/boost/atomic/detail/bitwise_cast.hpp b/inst/include/boost/atomic/detail/bitwise_cast.hpp
index 3318eb44..176077a5 100644
--- a/inst/include/boost/atomic/detail/bitwise_cast.hpp
+++ b/inst/include/boost/atomic/detail/bitwise_cast.hpp
@@ -56,7 +56,7 @@
 #if defined(BOOST_GCC) && BOOST_GCC >= 80000
 #pragma GCC diagnostic push
 // copying an object of non-trivial type X from an array of Y. This is benign because we use memcpy to copy trivially copyable objects.
-#pragma GCC diagnostic ignored "-Wclass-memaccess"
+//#pragma GCC diagnostic ignored "-Wclass-memaccess"
 #endif
 
 namespace boost {
diff --git a/inst/include/boost/atomic/detail/extra_fp_ops_generic.hpp b/inst/include/boost/atomic/detail/extra_fp_ops_generic.hpp
index aefd7d32..029c1594 100644
--- a/inst/include/boost/atomic/detail/extra_fp_ops_generic.hpp
+++ b/inst/include/boost/atomic/detail/extra_fp_ops_generic.hpp
@@ -31,7 +31,7 @@
 #if defined(BOOST_GCC) && BOOST_GCC >= 60000
 #pragma GCC diagnostic push
 // ignoring attributes on template argument X - this warning is because we need to pass storage_type as a template argument; no problem in this case
-#pragma GCC diagnostic ignored "-Wignored-attributes"
+//#pragma GCC diagnostic ignored "-Wignored-attributes"
 #endif
 
 namespace boost {
diff --git a/inst/include/boost/atomic/detail/header.hpp b/inst/include/boost/atomic/detail/header.hpp
index 0251c616..5dbe0572 100644
--- a/inst/include/boost/atomic/detail/header.hpp
+++ b/inst/include/boost/atomic/detail/header.hpp
@@ -55,17 +55,17 @@
 
 #pragma GCC diagnostic push
 // unused parameter 'arg'
-#pragma GCC diagnostic ignored "-Wunused-parameter"
+//#pragma GCC diagnostic ignored "-Wunused-parameter"
 // missing initializer for member var
-#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
+//#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
 
 #elif defined(BOOST_CLANG)
 
 #pragma clang diagnostic push
 // unused parameter 'arg'
-#pragma clang diagnostic ignored "-Wunused-parameter"
+//#pragma clang diagnostic ignored "-Wunused-parameter"
 // missing initializer for member var
-#pragma clang diagnostic ignored "-Wmissing-field-initializers"
+//#pragma clang diagnostic ignored "-Wmissing-field-initializers"
 
 #endif
 
diff --git a/inst/include/boost/bind.hpp b/inst/include/boost/bind.hpp
index 48cc4094..0f00ad35 100644
--- a/inst/include/boost/bind.hpp
+++ b/inst/include/boost/bind.hpp
@@ -45,7 +45,7 @@ BOOST_PRAGMA_MESSAGE(
 #if defined(BOOST_CLANG)
 # pragma clang diagnostic push
 # if  __has_warning("-Wheader-hygiene")
-#  pragma clang diagnostic ignored "-Wheader-hygiene"
+//#  pragma clang diagnostic ignored "-Wheader-hygiene"
 # endif
 #endif
 
diff --git a/inst/include/boost/concept/detail/general.hpp b/inst/include/boost/concept/detail/general.hpp
index 8d7d6f69..53d3b49c 100644
--- a/inst/include/boost/concept/detail/general.hpp
+++ b/inst/include/boost/concept/detail/general.hpp
@@ -30,7 +30,7 @@ struct requirement
 {
 #   if defined(BOOST_GCC) && (BOOST_GCC >= 110000)
 #   pragma GCC diagnostic push
-#   pragma GCC diagnostic ignored "-Wnonnull"
+  //#   pragma GCC diagnostic ignored "-Wnonnull"
 #   endif
     static void failed() { ((Model*)0)->~Model(); }
 #   if defined(BOOST_GCC) && (BOOST_GCC >= 110000)
@@ -45,7 +45,7 @@ struct requirement<failed ************ Model::************>
 {
 #   if defined(BOOST_GCC) && (BOOST_GCC >= 110000)
 #   pragma GCC diagnostic push
-#   pragma GCC diagnostic ignored "-Wnonnull"
+  //#   pragma GCC diagnostic ignored "-Wnonnull"
 #   endif
     static void failed() { ((Model*)0)->~Model(); }
 #   if defined(BOOST_GCC) && (BOOST_GCC >= 110000)
@@ -60,7 +60,7 @@ struct constraint
 {
 #   if defined(BOOST_GCC) && (BOOST_GCC >= 110000)
 #   pragma GCC diagnostic push
-#   pragma GCC diagnostic ignored "-Wnonnull"
+  //#   pragma GCC diagnostic ignored "-Wnonnull"
 #   endif
     static void failed() { ((Model*)0)->constraints(); }
 #   if defined(BOOST_GCC) && (BOOST_GCC >= 110000)
diff --git a/inst/include/boost/concept/usage.hpp b/inst/include/boost/concept/usage.hpp
index fe88b5f5..56f934dc 100644
--- a/inst/include/boost/concept/usage.hpp
+++ b/inst/include/boost/concept/usage.hpp
@@ -15,7 +15,7 @@ struct usage_requirements
 {
 #   if defined(BOOST_GCC) && (BOOST_GCC >= 110000)
 #   pragma GCC diagnostic push
-#   pragma GCC diagnostic ignored "-Wnonnull"
+  //#   pragma GCC diagnostic ignored "-Wnonnull"
 #   endif
     ~usage_requirements() { ((Model*)0)->~Model(); }
 #   if defined(BOOST_GCC) && (BOOST_GCC >= 110000)
diff --git a/inst/include/boost/container/allocator_traits.hpp b/inst/include/boost/container/allocator_traits.hpp
index f5f73efa..5e11142b 100644
--- a/inst/include/boost/container/allocator_traits.hpp
+++ b/inst/include/boost/container/allocator_traits.hpp
@@ -51,7 +51,7 @@
 
 #if defined(BOOST_GCC) && (BOOST_GCC >= 40600)
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wunused-result"
+//#pragma GCC diagnostic ignored "-Wunused-result"
 #endif
 
 #define BOOST_INTRUSIVE_HAS_MEMBER_FUNCTION_CALLABLE_WITH_FUNCNAME allocate
diff --git a/inst/include/boost/container/detail/config_begin.hpp b/inst/include/boost/container/detail/config_begin.hpp
index e1075d1d..96fc1b77 100644
--- a/inst/include/boost/container/detail/config_begin.hpp
+++ b/inst/include/boost/container/detail/config_begin.hpp
@@ -56,6 +56,6 @@
 //Sign conversion warnings broken before GCC 9.3
 //(https://gcc.gnu.org/bugzilla/show_bug.cgi?id=87519)
 #if BOOST_GCC < 90300
-#pragma GCC diagnostic ignored "-Wsign-conversion"
+//#pragma GCC diagnostic ignored "-Wsign-conversion"
 #endif
 #endif
diff --git a/inst/include/boost/container/detail/copy_move_algo.hpp b/inst/include/boost/container/detail/copy_move_algo.hpp
index 8729b307..b7a5b8c6 100644
--- a/inst/include/boost/container/detail/copy_move_algo.hpp
+++ b/inst/include/boost/container/detail/copy_move_algo.hpp
@@ -42,14 +42,14 @@
 #pragma GCC diagnostic push
 //pair memcpy optimizations rightfully detected by GCC
 #  if defined(BOOST_GCC) && (BOOST_GCC >= 80000)
-#     pragma GCC diagnostic ignored "-Wclass-memaccess"
+//#     pragma GCC diagnostic ignored "-Wclass-memaccess"
 #  endif
 //GCC 8 seems a bit confused about array access error with static_vector
 //when out of bound exceptions are being thrown.
 #  if defined(BOOST_GCC) && (BOOST_GCC >= 80000) && (BOOST_GCC < 80200)
-#     pragma GCC diagnostic ignored "-Wstringop-overflow"
+//#     pragma GCC diagnostic ignored "-Wstringop-overflow"
 #  endif
-#  pragma GCC diagnostic ignored "-Warray-bounds"
+//#  pragma GCC diagnostic ignored "-Warray-bounds"
 #endif
 
 namespace boost {
diff --git a/inst/include/boost/container/detail/flat_tree.hpp b/inst/include/boost/container/detail/flat_tree.hpp
index 91b11bcb..ef5176c4 100644
--- a/inst/include/boost/container/detail/flat_tree.hpp
+++ b/inst/include/boost/container/detail/flat_tree.hpp
@@ -59,7 +59,7 @@
 
 #if defined(BOOST_GCC) && (BOOST_GCC >= 40600)
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wunused-result"
+//#pragma GCC diagnostic ignored "-Wunused-result"
 #endif
 
 //merge_unique
diff --git a/inst/include/boost/container/detail/is_container.hpp b/inst/include/boost/container/detail/is_container.hpp
index 8ef0274d..96c9f69c 100644
--- a/inst/include/boost/container/detail/is_container.hpp
+++ b/inst/include/boost/container/detail/is_container.hpp
@@ -20,7 +20,7 @@
 
 #if defined(BOOST_GCC) && (BOOST_GCC >= 40600)
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wunused-result"
+//#pragma GCC diagnostic ignored "-Wunused-result"
 #endif
 
 //empty
diff --git a/inst/include/boost/container/detail/is_contiguous_container.hpp b/inst/include/boost/container/detail/is_contiguous_container.hpp
index 045de843..1504f5c3 100644
--- a/inst/include/boost/container/detail/is_contiguous_container.hpp
+++ b/inst/include/boost/container/detail/is_contiguous_container.hpp
@@ -20,7 +20,7 @@
 
 #if defined(BOOST_GCC) && (BOOST_GCC >= 40600)
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wunused-result"
+//#pragma GCC diagnostic ignored "-Wunused-result"
 #endif
 
 //data
diff --git a/inst/include/boost/container/detail/node_alloc_holder.hpp b/inst/include/boost/container/detail/node_alloc_holder.hpp
index 8db384e4..b8d421fc 100644
--- a/inst/include/boost/container/detail/node_alloc_holder.hpp
+++ b/inst/include/boost/container/detail/node_alloc_holder.hpp
@@ -80,7 +80,7 @@ struct base_node
 
    #if defined(BOOST_GCC) && (BOOST_GCC >= 40600) && (BOOST_GCC < 80000)
       #pragma GCC diagnostic push
-      #pragma GCC diagnostic ignored "-Wstrict-aliasing"
+  //      #pragma GCC diagnostic ignored "-Wstrict-aliasing"
       #define BOOST_CONTAINER_DISABLE_ALIASING_WARNING
    #  endif
    public:
diff --git a/inst/include/boost/container/small_vector.hpp b/inst/include/boost/container/small_vector.hpp
index 66b31954..f965ff66 100644
--- a/inst/include/boost/container/small_vector.hpp
+++ b/inst/include/boost/container/small_vector.hpp
@@ -472,8 +472,8 @@ BOOST_CONTAINER_FORCEINLINE typename small_vector_allocator<T, VoidAlloc, Option
    //and aligned storage is allowed to hold any type
    #if defined(BOOST_GCC) && (BOOST_GCC >= 40600)
    #pragma GCC diagnostic push
-   #pragma GCC diagnostic ignored "-Wcast-align"
-   #pragma GCC diagnostic ignored "-Wstrict-aliasing"
+   //   #pragma GCC diagnostic ignored "-Wcast-align"
+   //   #pragma GCC diagnostic ignored "-Wstrict-aliasing"
    #endif
    const vector_type& v = reinterpret_cast<const vector_type&>(*this);
    BOOST_ASSERT((std::size_t(this) % dtl::alignment_of<strawman_t>::value) == 0);
@@ -494,8 +494,8 @@ BOOST_CONTAINER_FORCEINLINE typename small_vector_allocator<T, VoidAlloc, Option
 
    #if defined(BOOST_GCC) && (BOOST_GCC >= 40600)
    #pragma GCC diagnostic push
-   #pragma GCC diagnostic ignored "-Wcast-align"
-   #pragma GCC diagnostic ignored "-Wstrict-aliasing"
+   //   #pragma GCC diagnostic ignored "-Wcast-align"
+   //   #pragma GCC diagnostic ignored "-Wstrict-aliasing"
    #endif
    vector_type& v = reinterpret_cast<vector_type&>(*this);
    BOOST_ASSERT((std::size_t(this) % dtl::alignment_of<strawman_t>::value) == 0);
diff --git a/inst/include/boost/container/stable_vector.hpp b/inst/include/boost/container/stable_vector.hpp
index bf1c7f17..061dc53b 100644
--- a/inst/include/boost/container/stable_vector.hpp
+++ b/inst/include/boost/container/stable_vector.hpp
@@ -161,7 +161,7 @@ struct node
 
    #if defined(BOOST_GCC) && (BOOST_GCC >= 40600) && (BOOST_GCC < 80000)
       #pragma GCC diagnostic push
-      #pragma GCC diagnostic ignored "-Wstrict-aliasing"
+  //      #pragma GCC diagnostic ignored "-Wstrict-aliasing"
       #define BOOST_CONTAINER_DISABLE_ALIASING_WARNING
    #  endif
 
diff --git a/inst/include/boost/container/string.hpp b/inst/include/boost/container/string.hpp
index 4474ed48..8a34876e 100644
--- a/inst/include/boost/container/string.hpp
+++ b/inst/include/boost/container/string.hpp
@@ -138,7 +138,7 @@ class basic_string_base
 
    #if defined(BOOST_GCC) && (BOOST_GCC >= 40600)
    #pragma GCC diagnostic push
-   #pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
+  //   #pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
    #endif
 
    //This is the structure controlling a long string
@@ -415,7 +415,7 @@ class basic_string_base
    //GCC seems a bit confused about uninitialized accesses
    #if defined(BOOST_GCC) && (BOOST_GCC >= 40700)
    #pragma GCC diagnostic push
-   #pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
+  //   #pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
    #endif
 
    BOOST_CONTAINER_FORCEINLINE pointer priv_long_addr() const
diff --git a/inst/include/boost/core/detail/string_view.hpp b/inst/include/boost/core/detail/string_view.hpp
index 1d89b8b4..454eecfe 100644
--- a/inst/include/boost/core/detail/string_view.hpp
+++ b/inst/include/boost/core/detail/string_view.hpp
@@ -61,7 +61,7 @@ template<> struct sv_to_uchar<char>
 
 #if defined(__GNUC__) && __GNUC__ * 100 + __GNUC_MINOR__ >= 406
 # pragma GCC diagnostic push
-# pragma GCC diagnostic ignored "-Wtype-limits"
+  //# pragma GCC diagnostic ignored "-Wtype-limits"
 #endif
 
 template<class Ch> BOOST_CXX14_CONSTEXPR std::size_t find_first_of( Ch const* p_, std::size_t n_, Ch const* s, std::size_t pos, std::size_t n ) BOOST_NOEXCEPT
diff --git a/inst/include/boost/core/lightweight_test.hpp b/inst/include/boost/core/lightweight_test.hpp
index c09ce873..7d9a34d4 100644
--- a/inst/include/boost/core/lightweight_test.hpp
+++ b/inst/include/boost/core/lightweight_test.hpp
@@ -145,14 +145,14 @@ inline void no_throw_failed_impl(const char* expr, const char* what, const char*
 #if defined(__clang__) && defined(__has_warning)
 # if __has_warning("-Wsign-compare")
 #  pragma clang diagnostic push
-#  pragma clang diagnostic ignored "-Wsign-compare"
+  //#  pragma clang diagnostic ignored "-Wsign-compare"
 # endif
 #elif defined(_MSC_VER)
 # pragma warning(push)
 # pragma warning(disable: 4389)
 #elif defined(__GNUC__) && !(defined(__INTEL_COMPILER) || defined(__ICL) || defined(__ICC) || defined(__ECC)) && (__GNUC__ * 100 + __GNUC_MINOR__) >= 406
 # pragma GCC diagnostic push
-# pragma GCC diagnostic ignored "-Wsign-compare"
+  //# pragma GCC diagnostic ignored "-Wsign-compare"
 #endif
 
 // specialize test output for char pointers to avoid printing as cstring
diff --git a/inst/include/boost/date_time/c_time.hpp b/inst/include/boost/date_time/c_time.hpp
index 24286f8a..d64bfcf4 100644
--- a/inst/include/boost/date_time/c_time.hpp
+++ b/inst/include/boost/date_time/c_time.hpp
@@ -92,7 +92,7 @@ namespace date_time {
 
 #if defined(__clang__) // Clang has to be checked before MSVC
 #pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wdeprecated-declarations"
+    //#pragma clang diagnostic ignored "-Wdeprecated-declarations"
 #elif (defined(_MSC_VER) && (_MSC_VER >= 1400))
 #pragma warning(push) // preserve warning settings
 #pragma warning(disable : 4996) // disable depricated localtime/gmtime warning on vc8
diff --git a/inst/include/boost/filesystem/detail/header.hpp b/inst/include/boost/filesystem/detail/header.hpp
index f98b0aba..70308ed8 100644
--- a/inst/include/boost/filesystem/detail/header.hpp
+++ b/inst/include/boost/filesystem/detail/header.hpp
@@ -40,9 +40,9 @@
 
 #pragma GCC diagnostic push
 // unused parameter 'arg'
-#pragma GCC diagnostic ignored "-Wunused-parameter"
+//#pragma GCC diagnostic ignored "-Wunused-parameter"
 // unused function 'foo'
-#pragma GCC diagnostic ignored "-Wunused-function"
+//#pragma GCC diagnostic ignored "-Wunused-function"
 
 #if defined(__clang__)
 // template argument uses unnamed type
diff --git a/inst/include/boost/function/function_base.hpp b/inst/include/boost/function/function_base.hpp
index 00c7ce8e..fbadee3a 100644
--- a/inst/include/boost/function/function_base.hpp
+++ b/inst/include/boost/function/function_base.hpp
@@ -716,7 +716,7 @@ public: // should be protected, but GCC 2.95.3 will fail to allow access
 
 #if defined(BOOST_CLANG)
 #   pragma clang diagnostic push
-#   pragma clang diagnostic ignored "-Wweak-vtables"
+  //#   pragma clang diagnostic ignored "-Wweak-vtables"
 #endif
 /**
  * The bad_function_call exception class is thrown when a boost::function
diff --git a/inst/include/boost/function/function_template.hpp b/inst/include/boost/function/function_template.hpp
index 23814464..617cd3a5 100644
--- a/inst/include/boost/function/function_template.hpp
+++ b/inst/include/boost/function/function_template.hpp
@@ -1015,10 +1015,10 @@ namespace boost {
 #             pragma GCC diagnostic push
               // This warning is technically correct, but we don't want to pay the price for initializing
               // just to silence a warning: https://github.com/boostorg/function/issues/27
-#             pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
+            //#             pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
 #             if (BOOST_GCC >= 120000)
                 // GCC 12 emits a different warning: https://github.com/boostorg/function/issues/42
-#               pragma GCC diagnostic ignored "-Wuninitialized"
+            //#               pragma GCC diagnostic ignored "-Wuninitialized"
 #             endif
 #           endif
             std::memcpy(this->functor.data, f.functor.data, sizeof(this->functor.data));
@@ -1029,7 +1029,7 @@ namespace boost {
 #if defined(BOOST_GCC) && (__GNUC__ >= 11)
 # pragma GCC diagnostic push
 // False positive in GCC 11/12 for empty function objects (function_n_test.cpp:673)
-# pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
+//# pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
 #endif
             get_vtable()->base.manager(f.functor, this->functor,
                                      boost::detail::function::move_functor_tag);
diff --git a/inst/include/boost/get_pointer.hpp b/inst/include/boost/get_pointer.hpp
index 36e2cd7d..b8d82f07 100644
--- a/inst/include/boost/get_pointer.hpp
+++ b/inst/include/boost/get_pointer.hpp
@@ -41,7 +41,7 @@ template<class T> T * get_pointer(T * p)
 #if defined( BOOST_CORE_DETAIL_DISABLE_LIBSTDCXX_DEPRECATED_WARNINGS )
 // Disable libstdc++ warnings about std::auto_ptr being deprecated in C++11 mode
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+  //#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 #define BOOST_CORE_DETAIL_DISABLED_DEPRECATED_WARNINGS
 #endif
 
diff --git a/inst/include/boost/interprocess/detail/config_begin.hpp b/inst/include/boost/interprocess/detail/config_begin.hpp
index d003ccd3..023954c4 100644
--- a/inst/include/boost/interprocess/detail/config_begin.hpp
+++ b/inst/include/boost/interprocess/detail/config_begin.hpp
@@ -46,5 +46,5 @@
 
 #if defined(BOOST_GCC) && (BOOST_GCC >= 40600)
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+//#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 #endif
diff --git a/inst/include/boost/interprocess/detail/config_external_begin.hpp b/inst/include/boost/interprocess/detail/config_external_begin.hpp
index 67c05568..93446dac 100644
--- a/inst/include/boost/interprocess/detail/config_external_begin.hpp
+++ b/inst/include/boost/interprocess/detail/config_external_begin.hpp
@@ -14,10 +14,10 @@
 
 #if defined(__GNUC__) && ((__GNUC__*100 + __GNUC_MINOR__) >= 406)
 #  pragma GCC diagnostic push
-#  pragma GCC diagnostic ignored "-Wshadow"
-#  pragma GCC diagnostic ignored "-Wsign-conversion"
-#  pragma GCC diagnostic ignored "-Wconversion"
+//#  pragma GCC diagnostic ignored "-Wshadow"
+//#  pragma GCC diagnostic ignored "-Wsign-conversion"
+//#  pragma GCC diagnostic ignored "-Wconversion"
 #  if (BOOST_GCC >= 100000)
-#     pragma GCC diagnostic ignored "-Warith-conversion"
+//#     pragma GCC diagnostic ignored "-Warith-conversion"
 #  endif
 #endif
diff --git a/inst/include/boost/interprocess/detail/timed_utils.hpp b/inst/include/boost/interprocess/detail/timed_utils.hpp
index 89fbccd0..eb76d3a5 100644
--- a/inst/include/boost/interprocess/detail/timed_utils.hpp
+++ b/inst/include/boost/interprocess/detail/timed_utils.hpp
@@ -95,7 +95,7 @@ struct enable_if_duration
 
    #if defined(__clang__) // Clang has to be checked before MSVC
    #  pragma clang diagnostic push
-   #  pragma clang diagnostic ignored "-Wdeprecated-declarations"
+  //   #  pragma clang diagnostic ignored "-Wdeprecated-declarations"
    #elif (defined(_MSC_VER) && (_MSC_VER >= 1400))
    #  pragma warning(push) // preserve warning settings
    #  pragma warning(disable : 4996) // disable depricated localtime/gmtime warning on vc8
diff --git a/inst/include/boost/interprocess/detail/win32_api.hpp b/inst/include/boost/interprocess/detail/win32_api.hpp
index 3967b0b2..a8a1ad7e 100644
--- a/inst/include/boost/interprocess/detail/win32_api.hpp
+++ b/inst/include/boost/interprocess/detail/win32_api.hpp
@@ -61,17 +61,17 @@
 #  if (BOOST_GCC >= 40600)
 #     pragma GCC diagnostic push
 #     if (BOOST_GCC >= 40800)
-#        pragma GCC diagnostic ignored "-Wpedantic"
+//#        pragma GCC diagnostic ignored "-Wpedantic"
 #     else
-#        pragma GCC diagnostic ignored "-pedantic"
+//#        pragma GCC diagnostic ignored "-pedantic"
 #     endif
-#     pragma GCC diagnostic ignored "-Wnon-virtual-dtor"
+//#     pragma GCC diagnostic ignored "-Wnon-virtual-dtor"
 #  else
 #     pragma GCC system_header
 #  endif
 //When loading DLLs we have no option but reinterpret casting function types  
 #  if (BOOST_GCC >= 80000)
-#        pragma GCC diagnostic ignored "-Wcast-function-type"
+//#        pragma GCC diagnostic ignored "-Wcast-function-type"
 #  endif
 #endif
 
diff --git a/inst/include/boost/interprocess/offset_ptr.hpp b/inst/include/boost/interprocess/offset_ptr.hpp
index 698e26bf..f5a2bbec 100644
--- a/inst/include/boost/interprocess/offset_ptr.hpp
+++ b/inst/include/boost/interprocess/offset_ptr.hpp
@@ -38,7 +38,7 @@
 
 #if defined(BOOST_GCC) && (BOOST_GCC >= 40600)
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
+//#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
 #endif
 
 
diff --git a/inst/include/boost/intrusive/pointer_plus_bits.hpp b/inst/include/boost/intrusive/pointer_plus_bits.hpp
index b967bb63..6084ef08 100644
--- a/inst/include/boost/intrusive/pointer_plus_bits.hpp
+++ b/inst/include/boost/intrusive/pointer_plus_bits.hpp
@@ -29,9 +29,9 @@
 #if defined(BOOST_GCC)
 #  if (BOOST_GCC >= 40600)
 #     pragma GCC diagnostic push
-#     pragma GCC diagnostic ignored "-Wuninitialized"
+//#     pragma GCC diagnostic ignored "-Wuninitialized"
 #     if (BOOST_GCC >= 40700)
-#        pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
+//#        pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
 #     endif
 #  endif
 #endif
diff --git a/inst/include/boost/iterator/advance.hpp b/inst/include/boost/iterator/advance.hpp
index 2b742565..2f810ad7 100644
--- a/inst/include/boost/iterator/advance.hpp
+++ b/inst/include/boost/iterator/advance.hpp
@@ -32,7 +32,7 @@ namespace iterators {
 #if BOOST_WORKAROUND(BOOST_GCC_VERSION, >= 40600)
 // type-limits warning issued below when n is an unsigned integral
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wtype-limits"
+      //#pragma GCC diagnostic ignored "-Wtype-limits"
 #endif
 
         template <typename BidirectionalIterator, typename Distance>
diff --git a/inst/include/boost/json/value.hpp b/inst/include/boost/json/value.hpp
index 9041ab8e..711f319a 100644
--- a/inst/include/boost/json/value.hpp
+++ b/inst/include/boost/json/value.hpp
@@ -4250,7 +4250,7 @@ get<1>(key_value_pair&& kvp) noexcept
 
 #ifdef __clang__
 # pragma clang diagnostic push
-# pragma clang diagnostic ignored "-Wmismatched-tags"
+//# pragma clang diagnostic ignored "-Wmismatched-tags"
 #endif
 
 #ifndef BOOST_JSON_DOCS
diff --git a/inst/include/boost/lexical_cast/try_lexical_convert.hpp b/inst/include/boost/lexical_cast/try_lexical_convert.hpp
index 962d950e..a67f7732 100644
--- a/inst/include/boost/lexical_cast/try_lexical_convert.hpp
+++ b/inst/include/boost/lexical_cast/try_lexical_convert.hpp
@@ -27,8 +27,8 @@
     !(defined(__INTEL_COMPILER) || defined(__ICL) || defined(__ICC) || defined(__ECC)) && \
     (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6)))
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wuninitialized"
-#pragma GCC diagnostic ignored "-Wsign-conversion"
+//#pragma GCC diagnostic ignored "-Wuninitialized"
+//#pragma GCC diagnostic ignored "-Wsign-conversion"
 #endif
 
 
diff --git a/inst/include/boost/log/detail/header.hpp b/inst/include/boost/log/detail/header.hpp
index 37495c00..784d0b7e 100644
--- a/inst/include/boost/log/detail/header.hpp
+++ b/inst/include/boost/log/detail/header.hpp
@@ -52,20 +52,20 @@
 
 #pragma GCC diagnostic push
 // 'var' defined but not used
-#pragma GCC diagnostic ignored "-Wunused-variable"
+//#pragma GCC diagnostic ignored "-Wunused-variable"
 // unused parameter 'arg'
-#pragma GCC diagnostic ignored "-Wunused-parameter"
+//#pragma GCC diagnostic ignored "-Wunused-parameter"
 // missing initializer for member var
-#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
+//#pragma GCC diagnostic ignored "-Wmissing-field-initializers"
 
 #if (__GNUC__ * 100 + __GNUC_MINOR__) >= 407
 // typedef 'foo' locally defined but not used
-#pragma GCC diagnostic ignored "-Wunused-local-typedefs"
+//#pragma GCC diagnostic ignored "-Wunused-local-typedefs"
 #endif
 
 #if defined(__clang__)
 // the argument to '__builtin_assume' has side effects that will be discarded
-#pragma clang diagnostic ignored "-Wassume"
+//#pragma clang diagnostic ignored "-Wassume"
 #endif // defined(__clang__)
 
 #endif
diff --git a/inst/include/boost/move/algo/adaptive_merge.hpp b/inst/include/boost/move/algo/adaptive_merge.hpp
index bba41bd2..58430bfd 100644
--- a/inst/include/boost/move/algo/adaptive_merge.hpp
+++ b/inst/include/boost/move/algo/adaptive_merge.hpp
@@ -18,7 +18,7 @@
 
 #if defined(BOOST_CLANG) || (defined(BOOST_GCC) && (BOOST_GCC >= 40600))
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wsign-conversion"
+//#pragma GCC diagnostic ignored "-Wsign-conversion"
 #endif
 
 namespace boost {
diff --git a/inst/include/boost/move/algo/adaptive_sort.hpp b/inst/include/boost/move/algo/adaptive_sort.hpp
index b2ade8b8..91cdd7c9 100644
--- a/inst/include/boost/move/algo/adaptive_sort.hpp
+++ b/inst/include/boost/move/algo/adaptive_sort.hpp
@@ -19,7 +19,7 @@
 
 #if defined(BOOST_CLANG) || (defined(BOOST_GCC) && (BOOST_GCC >= 40600))
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wsign-conversion"
+//#pragma GCC diagnostic ignored "-Wsign-conversion"
 #endif
 
 namespace boost {
diff --git a/inst/include/boost/move/algo/detail/adaptive_sort_merge.hpp b/inst/include/boost/move/algo/detail/adaptive_sort_merge.hpp
index 79c46996..0fb2d10f 100644
--- a/inst/include/boost/move/algo/detail/adaptive_sort_merge.hpp
+++ b/inst/include/boost/move/algo/detail/adaptive_sort_merge.hpp
@@ -59,7 +59,7 @@
 
 #if defined(BOOST_CLANG) || (defined(BOOST_GCC) && (BOOST_GCC >= 40600))
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wsign-conversion"
+//#pragma GCC diagnostic ignored "-Wsign-conversion"
 #endif
 
 #ifndef BOOST_MOVE_ADAPTIVE_SORT_STATS_LEVEL
diff --git a/inst/include/boost/move/algo/detail/heap_sort.hpp b/inst/include/boost/move/algo/detail/heap_sort.hpp
index 60db353e..6f42d443 100644
--- a/inst/include/boost/move/algo/detail/heap_sort.hpp
+++ b/inst/include/boost/move/algo/detail/heap_sort.hpp
@@ -32,7 +32,7 @@
 
 #if defined(BOOST_CLANG) || (defined(BOOST_GCC) && (BOOST_GCC >= 40600))
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wsign-conversion"
+//#pragma GCC diagnostic ignored "-Wsign-conversion"
 #endif
 
 namespace boost {  namespace movelib{
diff --git a/inst/include/boost/move/algo/detail/insertion_sort.hpp b/inst/include/boost/move/algo/detail/insertion_sort.hpp
index 77f0b698..c5a6e501 100644
--- a/inst/include/boost/move/algo/detail/insertion_sort.hpp
+++ b/inst/include/boost/move/algo/detail/insertion_sort.hpp
@@ -35,7 +35,7 @@
 
 #if defined(BOOST_CLANG) || (defined(BOOST_GCC) && (BOOST_GCC >= 40600))
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wsign-conversion"
+//#pragma GCC diagnostic ignored "-Wsign-conversion"
 #endif
 
 namespace boost {  namespace movelib{
diff --git a/inst/include/boost/move/algo/detail/merge.hpp b/inst/include/boost/move/algo/detail/merge.hpp
index ad260046..eba2627f 100644
--- a/inst/include/boost/move/algo/detail/merge.hpp
+++ b/inst/include/boost/move/algo/detail/merge.hpp
@@ -23,7 +23,7 @@
 
 #if defined(BOOST_CLANG) || (defined(BOOST_GCC) && (BOOST_GCC >= 40600))
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wsign-conversion"
+//#pragma GCC diagnostic ignored "-Wsign-conversion"
 #endif
 
 namespace boost {
diff --git a/inst/include/boost/move/algo/detail/merge_sort.hpp b/inst/include/boost/move/algo/detail/merge_sort.hpp
index dbc4797c..a9ec3e57 100644
--- a/inst/include/boost/move/algo/detail/merge_sort.hpp
+++ b/inst/include/boost/move/algo/detail/merge_sort.hpp
@@ -36,7 +36,7 @@
 
 #if defined(BOOST_CLANG) || (defined(BOOST_GCC) && (BOOST_GCC >= 40600))
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wsign-conversion"
+//#pragma GCC diagnostic ignored "-Wsign-conversion"
 #endif
 
 namespace boost {
diff --git a/inst/include/boost/move/algo/detail/pdqsort.hpp b/inst/include/boost/move/algo/detail/pdqsort.hpp
index 1e927558..1b46b0af 100644
--- a/inst/include/boost/move/algo/detail/pdqsort.hpp
+++ b/inst/include/boost/move/algo/detail/pdqsort.hpp
@@ -59,7 +59,7 @@
 
 #if defined(BOOST_CLANG) || (defined(BOOST_GCC) && (BOOST_GCC >= 40600))
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wsign-conversion"
+//#pragma GCC diagnostic ignored "-Wsign-conversion"
 #endif
 
 namespace boost {
diff --git a/inst/include/boost/move/algo/detail/search.hpp b/inst/include/boost/move/algo/detail/search.hpp
index 9433fbd4..10e89302 100644
--- a/inst/include/boost/move/algo/detail/search.hpp
+++ b/inst/include/boost/move/algo/detail/search.hpp
@@ -15,7 +15,7 @@
 
 #if defined(BOOST_CLANG) || (defined(BOOST_GCC) && (BOOST_GCC >= 40600))
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wsign-conversion"
+//#pragma GCC diagnostic ignored "-Wsign-conversion"
 #endif
 
 namespace boost {
diff --git a/inst/include/boost/move/algo/detail/set_difference.hpp b/inst/include/boost/move/algo/detail/set_difference.hpp
index 812ca5f3..1d5163ed 100644
--- a/inst/include/boost/move/algo/detail/set_difference.hpp
+++ b/inst/include/boost/move/algo/detail/set_difference.hpp
@@ -17,7 +17,7 @@
 
 #if defined(BOOST_CLANG) || (defined(BOOST_GCC) && (BOOST_GCC >= 40600))
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wsign-conversion"
+//#pragma GCC diagnostic ignored "-Wsign-conversion"
 #endif
 
 namespace boost {
diff --git a/inst/include/boost/move/detail/std_ns_begin.hpp b/inst/include/boost/move/detail/std_ns_begin.hpp
index 1d28117b..2fd3691b 100644
--- a/inst/include/boost/move/detail/std_ns_begin.hpp
+++ b/inst/include/boost/move/detail/std_ns_begin.hpp
@@ -13,7 +13,7 @@
    #if defined(__clang__)
       #define BOOST_MOVE_STD_NS_GCC_DIAGNOSTIC_PUSH
       #pragma GCC diagnostic push
-      #pragma GCC diagnostic ignored "-Wc++11-extensions"
+//      #pragma GCC diagnostic ignored "-Wc++11-extensions"
    #endif
    #define BOOST_MOVE_STD_NS_BEG _LIBCPP_BEGIN_NAMESPACE_STD
    #define BOOST_MOVE_STD_NS_END _LIBCPP_END_NAMESPACE_STD
diff --git a/inst/include/boost/mp11/function.hpp b/inst/include/boost/mp11/function.hpp
index e20b4520..6aa9c6f2 100644
--- a/inst/include/boost/mp11/function.hpp
+++ b/inst/include/boost/mp11/function.hpp
@@ -200,7 +200,7 @@ template<class... T> using mp_similar = typename detail::mp_similar_impl<T...>::
 
 #if BOOST_MP11_GCC
 # pragma GCC diagnostic push
-# pragma GCC diagnostic ignored "-Wsign-compare"
+  //# pragma GCC diagnostic ignored "-Wsign-compare"
 #endif
 
 // mp_less<T1, T2>
diff --git a/inst/include/boost/mpl/assert.hpp b/inst/include/boost/mpl/assert.hpp
index c7ecddf0..1143345c 100644
--- a/inst/include/boost/mpl/assert.hpp
+++ b/inst/include/boost/mpl/assert.hpp
@@ -187,7 +187,7 @@ template< typename P > struct assert_arg_pred_not
 #if BOOST_WORKAROUND(BOOST_GCC_VERSION, >= 80000)
 #define BOOST_MPL_IGNORE_PARENTHESES_WARNING
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wparentheses"
+//#pragma GCC diagnostic ignored "-Wparentheses"
 #endif
 
 template< typename Pred >
diff --git a/inst/include/boost/mpl/print.hpp b/inst/include/boost/mpl/print.hpp
index 36e25cd3..430aa797 100644
--- a/inst/include/boost/mpl/print.hpp
+++ b/inst/include/boost/mpl/print.hpp
@@ -48,7 +48,7 @@ struct print
 {
 #if defined(__clang__)
 # pragma clang diagnostic push
-# pragma clang diagnostic ignored "-Wc++11-extensions"
+  //# pragma clang diagnostic ignored "-Wc++11-extensions"
     const int m_x = 1 / (sizeof(T) - sizeof(T));
 # pragma clang diagnostic pop
 #elif defined(BOOST_MSVC)
diff --git a/inst/include/boost/multi_array.hpp b/inst/include/boost/multi_array.hpp
index c9ed215b..8b2ad940 100644
--- a/inst/include/boost/multi_array.hpp
+++ b/inst/include/boost/multi_array.hpp
@@ -23,7 +23,7 @@
 
 #if defined(__GNUC__) && ((__GNUC__*100 + __GNUC_MINOR__) >= 406)
 #  pragma GCC diagnostic push
-#  pragma GCC diagnostic ignored "-Wshadow"
+//#  pragma GCC diagnostic ignored "-Wshadow"
 #endif
 
 #include "boost/multi_array/base.hpp"
diff --git a/inst/include/boost/multi_index/detail/ignore_wstrict_aliasing.hpp b/inst/include/boost/multi_index/detail/ignore_wstrict_aliasing.hpp
index ae398456..6524edc1 100644
--- a/inst/include/boost/multi_index/detail/ignore_wstrict_aliasing.hpp
+++ b/inst/include/boost/multi_index/detail/ignore_wstrict_aliasing.hpp
@@ -11,7 +11,7 @@
 #if defined(BOOST_GCC)&&(BOOST_GCC>=4*10000+6*100)
 #if !defined(BOOST_MULTI_INDEX_DETAIL_RESTORE_WSTRICT_ALIASING)
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wstrict-aliasing"
+//#pragma GCC diagnostic ignored "-Wstrict-aliasing"
 #else
 #pragma GCC diagnostic pop
 #endif
diff --git a/inst/include/boost/multiprecision/cpp_int.hpp b/inst/include/boost/multiprecision/cpp_int.hpp
index f0dad5a1..0fed9522 100644
--- a/inst/include/boost/multiprecision/cpp_int.hpp
+++ b/inst/include/boost/multiprecision/cpp_int.hpp
@@ -44,7 +44,7 @@ namespace multiprecision {
 // see https://github.com/boostorg/multiprecision/issues/413
 // and https://github.com/boostorg/multiprecision/issues/431
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
+  //#pragma GCC diagnostic ignored "-Wmaybe-uninitialized"
 #endif
 
 namespace detail {
diff --git a/inst/include/boost/multiprecision/cpp_int/misc.hpp b/inst/include/boost/multiprecision/cpp_int/misc.hpp
index cdae2f75..58265a92 100644
--- a/inst/include/boost/multiprecision/cpp_int/misc.hpp
+++ b/inst/include/boost/multiprecision/cpp_int/misc.hpp
@@ -367,7 +367,7 @@ eval_msb(const cpp_int_backend<MinBits1, MaxBits1, SignType1, Checked1, Allocato
 // spurious.  The warning appears only when in release mode, and asserts are on.
 //
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Warray-bounds"
+//#pragma GCC diagnostic ignored "-Warray-bounds"
 #endif
 
 template <std::size_t MinBits1, std::size_t MaxBits1, cpp_integer_type SignType1, cpp_int_check_type Checked1, class Allocator1>
diff --git a/inst/include/boost/optional/bad_optional_access.hpp b/inst/include/boost/optional/bad_optional_access.hpp
index add78675..2555898a 100644
--- a/inst/include/boost/optional/bad_optional_access.hpp
+++ b/inst/include/boost/optional/bad_optional_access.hpp
@@ -21,7 +21,7 @@ namespace boost {
 
 #if defined(__clang__)
 # pragma clang diagnostic push
-# pragma clang diagnostic ignored "-Wweak-vtables"
+  //# pragma clang diagnostic ignored "-Wweak-vtables"
 #endif
 
 class bad_optional_access : public std::logic_error
diff --git a/inst/include/boost/phoenix/core/actor.hpp b/inst/include/boost/phoenix/core/actor.hpp
index 5a9fa0c5..b7b6dab2 100644
--- a/inst/include/boost/phoenix/core/actor.hpp
+++ b/inst/include/boost/phoenix/core/actor.hpp
@@ -132,7 +132,7 @@ namespace boost { namespace phoenix
 #if defined __clang__ && defined __has_warning
 #  pragma clang diagnostic push
 #  if __has_warning("-Wdeprecated-copy")
-#    pragma clang diagnostic ignored "-Wdeprecated-copy"
+  //#    pragma clang diagnostic ignored "-Wdeprecated-copy"
 #  endif
 #endif
     template <typename Expr>
diff --git a/inst/include/boost/proto/expr.hpp b/inst/include/boost/proto/expr.hpp
index bbdb014a..25f5e73a 100644
--- a/inst/include/boost/proto/expr.hpp
+++ b/inst/include/boost/proto/expr.hpp
@@ -137,7 +137,7 @@ namespace boost { namespace proto
             // The warning cannot be fixed for aggregates
             // Sadly, GCC currently emits the warning at the use location:
             // https://gcc.gnu.org/bugzilla/show_bug.cgi?id=94492
-            #pragma GCC diagnostic ignored "-Wdeprecated-copy"
+      //            #pragma GCC diagnostic ignored "-Wdeprecated-copy"
         #endif
 
         // This is where the expr specialization are
diff --git a/inst/include/boost/ptr_container/detail/reversible_ptr_container.hpp b/inst/include/boost/ptr_container/detail/reversible_ptr_container.hpp
index f5eb396c..c802530a 100644
--- a/inst/include/boost/ptr_container/detail/reversible_ptr_container.hpp
+++ b/inst/include/boost/ptr_container/detail/reversible_ptr_container.hpp
@@ -48,7 +48,7 @@
 
 #if defined(BOOST_PTR_CONTAINER_DISABLE_DEPRECATED)
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+//#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 #endif
 
 namespace boost
diff --git a/inst/include/boost/ptr_container/ptr_sequence_adapter.hpp b/inst/include/boost/ptr_container/ptr_sequence_adapter.hpp
index eb907ba9..8c5f8a91 100644
--- a/inst/include/boost/ptr_container/ptr_sequence_adapter.hpp
+++ b/inst/include/boost/ptr_container/ptr_sequence_adapter.hpp
@@ -27,7 +27,7 @@
 
 #if defined(BOOST_PTR_CONTAINER_DISABLE_DEPRECATED)
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+//#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 #endif
 
 namespace boost
diff --git a/inst/include/boost/ptr_container/ptr_vector.hpp b/inst/include/boost/ptr_container/ptr_vector.hpp
index 87016297..9896baa7 100644
--- a/inst/include/boost/ptr_container/ptr_vector.hpp
+++ b/inst/include/boost/ptr_container/ptr_vector.hpp
@@ -24,7 +24,7 @@
 
 #if defined(BOOST_PTR_CONTAINER_DISABLE_DEPRECATED)
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+//#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 #endif
 
 namespace boost
diff --git a/inst/include/boost/python/detail/wrap_python.hpp b/inst/include/boost/python/detail/wrap_python.hpp
index 037e4bf2..a0aef791 100644
--- a/inst/include/boost/python/detail/wrap_python.hpp
+++ b/inst/include/boost/python/detail/wrap_python.hpp
@@ -166,7 +166,7 @@ typedef int pid_t;
 // Python.h header uses `register` keyword until Python 3.4
 #if BOOST_PYTHON_GCC_HAS_WREGISTER
 # pragma GCC diagnostic push
-# pragma GCC diagnostic ignored "-Wregister"
+//# pragma GCC diagnostic ignored "-Wregister"
 #elif defined(_MSC_VER)
 # pragma warning(push)
 # pragma warning(disable : 5033)  // 'register' is no longer a supported storage class
diff --git a/inst/include/boost/random/detail/disable_warnings.hpp b/inst/include/boost/random/detail/disable_warnings.hpp
index 4582dcb1..47c7b2e8 100644
--- a/inst/include/boost/random/detail/disable_warnings.hpp
+++ b/inst/include/boost/random/detail/disable_warnings.hpp
@@ -25,5 +25,5 @@
 
 #if defined(BOOST_GCC) && BOOST_GCC >= 40600
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wlogical-op"
+//#pragma GCC diagnostic ignored "-Wlogical-op"
 #endif
diff --git a/inst/include/boost/range/adaptor/indexed.hpp b/inst/include/boost/range/adaptor/indexed.hpp
index 8fd02890..b98fa3ac 100644
--- a/inst/include/boost/range/adaptor/indexed.hpp
+++ b/inst/include/boost/range/adaptor/indexed.hpp
@@ -373,7 +373,7 @@ namespace std {
 
 #if defined(BOOST_CLANG)
 #pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wmismatched-tags"
+  //#pragma clang diagnostic ignored "-Wmismatched-tags"
 #endif
 
 template<size_t N, class T, class Indexable>
diff --git a/inst/include/boost/smart_ptr/bad_weak_ptr.hpp b/inst/include/boost/smart_ptr/bad_weak_ptr.hpp
index d8edd04c..38e6b089 100644
--- a/inst/include/boost/smart_ptr/bad_weak_ptr.hpp
+++ b/inst/include/boost/smart_ptr/bad_weak_ptr.hpp
@@ -40,7 +40,7 @@ namespace boost
 #if defined(BOOST_CLANG)
 // Intel C++ on Mac defines __clang__ but doesn't support the pragma
 # pragma clang diagnostic push
-# pragma clang diagnostic ignored "-Wweak-vtables"
+  //# pragma clang diagnostic ignored "-Wweak-vtables"
 #endif
 
 class bad_weak_ptr: public std::exception
diff --git a/inst/include/boost/smart_ptr/detail/shared_count.hpp b/inst/include/boost/smart_ptr/detail/shared_count.hpp
index c6fe1bb2..7623b2ee 100644
--- a/inst/include/boost/smart_ptr/detail/shared_count.hpp
+++ b/inst/include/boost/smart_ptr/detail/shared_count.hpp
@@ -43,7 +43,7 @@
 
 #if defined( BOOST_SP_DISABLE_DEPRECATED )
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+//#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 #endif
 
 namespace boost
diff --git a/inst/include/boost/smart_ptr/scoped_ptr.hpp b/inst/include/boost/smart_ptr/scoped_ptr.hpp
index da8df191..27def3b4 100644
--- a/inst/include/boost/smart_ptr/scoped_ptr.hpp
+++ b/inst/include/boost/smart_ptr/scoped_ptr.hpp
@@ -25,7 +25,7 @@
 
 #if defined( BOOST_SP_DISABLE_DEPRECATED )
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+//#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 #endif
 
 namespace boost
diff --git a/inst/include/boost/smart_ptr/shared_ptr.hpp b/inst/include/boost/smart_ptr/shared_ptr.hpp
index e5993aa7..34e087eb 100644
--- a/inst/include/boost/smart_ptr/shared_ptr.hpp
+++ b/inst/include/boost/smart_ptr/shared_ptr.hpp
@@ -46,7 +46,7 @@
 
 #if defined( BOOST_SP_DISABLE_DEPRECATED )
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
+//#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 #endif
 
 namespace boost
diff --git a/inst/include/boost/static_string/static_string.hpp b/inst/include/boost/static_string/static_string.hpp
index b899d546..27fc2bc0 100644
--- a/inst/include/boost/static_string/static_string.hpp
+++ b/inst/include/boost/static_string/static_string.hpp
@@ -575,7 +575,7 @@ count_digits(std::size_t value)
 // not need to be extremely precise.
 #if defined(__GNUC__) && __GNUC__ >= 7
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wformat-truncation"
+//#pragma GCC diagnostic ignored "-Wformat-truncation"
 #endif
 
 template<std::size_t N>
diff --git a/inst/include/boost/system/detail/error_category.hpp b/inst/include/boost/system/detail/error_category.hpp
index acc34943..7c2e6dcd 100644
--- a/inst/include/boost/system/detail/error_category.hpp
+++ b/inst/include/boost/system/detail/error_category.hpp
@@ -46,7 +46,7 @@ class std_category;
 
 #if ( defined( BOOST_GCC ) && BOOST_GCC >= 40600 ) || defined( BOOST_CLANG )
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wnon-virtual-dtor"
+  //#pragma GCC diagnostic ignored "-Wnon-virtual-dtor"
 #endif
 
 #if defined(BOOST_MSVC) && BOOST_MSVC < 1900
diff --git a/inst/include/boost/system/detail/error_category_impl.hpp b/inst/include/boost/system/detail/error_category_impl.hpp
index 2005397a..1c929389 100644
--- a/inst/include/boost/system/detail/error_category_impl.hpp
+++ b/inst/include/boost/system/detail/error_category_impl.hpp
@@ -66,7 +66,7 @@ inline char const * error_category::message( int ev, char * buffer, std::size_t
 # elif defined(__clang__) && defined(__has_warning)
 #  pragma clang diagnostic push
 #  if __has_warning("-Wdeprecated-declarations")
-#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
+        //#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
 #  endif
 # endif
 
@@ -135,7 +135,7 @@ inline void error_category::init_stdcat() const
 
 #if defined( BOOST_GCC ) && BOOST_GCC >= 40800 && BOOST_GCC < 70000
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wstrict-aliasing"
+  //#pragma GCC diagnostic ignored "-Wstrict-aliasing"
 #endif
 
 inline BOOST_NOINLINE error_category::operator std::error_category const & () const
diff --git a/inst/include/boost/system/detail/error_code.hpp b/inst/include/boost/system/detail/error_code.hpp
index 2b387fb6..c8573109 100644
--- a/inst/include/boost/system/detail/error_code.hpp
+++ b/inst/include/boost/system/detail/error_code.hpp
@@ -40,7 +40,7 @@
 
 #if defined(BOOST_GCC) && BOOST_GCC >= 40600 && BOOST_GCC < 70000
 # pragma GCC diagnostic push
-# pragma GCC diagnostic ignored "-Wstrict-aliasing"
+//# pragma GCC diagnostic ignored "-Wstrict-aliasing"
 #endif
 
 namespace boost
diff --git a/inst/include/boost/system/detail/generic_category.hpp b/inst/include/boost/system/detail/generic_category.hpp
index 0a41b677..fd233e68 100644
--- a/inst/include/boost/system/detail/generic_category.hpp
+++ b/inst/include/boost/system/detail/generic_category.hpp
@@ -28,7 +28,7 @@ namespace detail
 
 #if ( defined( BOOST_GCC ) && BOOST_GCC >= 40600 ) || defined( BOOST_CLANG )
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wnon-virtual-dtor"
+  //#pragma GCC diagnostic ignored "-Wnon-virtual-dtor"
 #endif
 
 class BOOST_SYMBOL_VISIBLE generic_error_category: public error_category
diff --git a/inst/include/boost/system/detail/generic_category_message.hpp b/inst/include/boost/system/detail/generic_category_message.hpp
index fbdb41a3..55f10169 100644
--- a/inst/include/boost/system/detail/generic_category_message.hpp
+++ b/inst/include/boost/system/detail/generic_category_message.hpp
@@ -58,7 +58,7 @@ inline std::string generic_error_category_message( int ev )
 # elif defined(__clang__) && defined(__has_warning)
 #  pragma clang diagnostic push
 #  if __has_warning("-Wdeprecated-declarations")
-#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
+  //#   pragma clang diagnostic ignored "-Wdeprecated-declarations"
 #  endif
 # endif
 
diff --git a/inst/include/boost/system/detail/interop_category.hpp b/inst/include/boost/system/detail/interop_category.hpp
index 9755ad5a..1a2145d8 100644
--- a/inst/include/boost/system/detail/interop_category.hpp
+++ b/inst/include/boost/system/detail/interop_category.hpp
@@ -28,7 +28,7 @@ namespace detail
 
 #if ( defined( BOOST_GCC ) && BOOST_GCC >= 40600 ) || defined( BOOST_CLANG )
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wnon-virtual-dtor"
+  //#pragma GCC diagnostic ignored "-Wnon-virtual-dtor"
 #endif
 
 class BOOST_SYMBOL_VISIBLE interop_error_category: public error_category
diff --git a/inst/include/boost/system/detail/system_category.hpp b/inst/include/boost/system/detail/system_category.hpp
index ae8c9530..1e239511 100644
--- a/inst/include/boost/system/detail/system_category.hpp
+++ b/inst/include/boost/system/detail/system_category.hpp
@@ -27,7 +27,7 @@ namespace detail
 
 #if ( defined( BOOST_GCC ) && BOOST_GCC >= 40600 ) || defined( BOOST_CLANG )
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wnon-virtual-dtor"
+  //#pragma GCC diagnostic ignored "-Wnon-virtual-dtor"
 #endif
 
 class BOOST_SYMBOL_VISIBLE system_error_category: public error_category
diff --git a/inst/include/boost/system/result.hpp b/inst/include/boost/system/result.hpp
index 833254cb..e750c588 100644
--- a/inst/include/boost/system/result.hpp
+++ b/inst/include/boost/system/result.hpp
@@ -31,7 +31,7 @@ namespace system
 
 #if defined(__GNUC__) && __GNUC__ >= 7 && __GNUC__ <= 8
 # pragma GCC diagnostic push
-# pragma GCC diagnostic ignored "-Wattributes"
+  //# pragma GCC diagnostic ignored "-Wattributes"
 #endif
 
 BOOST_NORETURN BOOST_NOINLINE inline void throw_exception_from_error( error_code const & e, boost::source_location const& loc )
diff --git a/inst/include/boost/test/detail/suppress_warnings.hpp b/inst/include/boost/test/detail/suppress_warnings.hpp
index 2145da5f..79ed3b25 100644
--- a/inst/include/boost/test/detail/suppress_warnings.hpp
+++ b/inst/include/boost/test/detail/suppress_warnings.hpp
@@ -28,14 +28,14 @@
 
 #if defined(BOOST_CLANG) && (BOOST_CLANG == 1)
 # pragma clang diagnostic push
-# pragma clang diagnostic ignored "-Wvariadic-macros"
-# pragma clang diagnostic ignored "-Wmissing-declarations"
+//# pragma clang diagnostic ignored "-Wvariadic-macros"
+//# pragma clang diagnostic ignored "-Wmissing-declarations"
 #endif
 
 #if defined(BOOST_GCC) && (BOOST_GCC >= 4 * 10000 + 6 * 100)
 # pragma GCC diagnostic push
-# pragma GCC diagnostic ignored "-Wvariadic-macros"
-# pragma GCC diagnostic ignored "-Wmissing-declarations"
+//# pragma GCC diagnostic ignored "-Wvariadic-macros"
+//# pragma GCC diagnostic ignored "-Wmissing-declarations"
 // # pragma GCC diagnostic ignored "-Wattributes"
 #endif
 
diff --git a/inst/include/boost/tuple/detail/tuple_basic.hpp b/inst/include/boost/tuple/detail/tuple_basic.hpp
index ad488be7..a4969ae0 100644
--- a/inst/include/boost/tuple/detail/tuple_basic.hpp
+++ b/inst/include/boost/tuple/detail/tuple_basic.hpp
@@ -45,7 +45,7 @@
 
 #if defined(BOOST_GCC) && (BOOST_GCC >= 40700)
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wunused-local-typedefs"
+//#pragma GCC diagnostic ignored "-Wunused-local-typedefs"
 #endif
 
 namespace boost {
diff --git a/inst/include/boost/tuple/tuple.hpp b/inst/include/boost/tuple/tuple.hpp
index cbebdf1b..8ed3e5fc 100644
--- a/inst/include/boost/tuple/tuple.hpp
+++ b/inst/include/boost/tuple/tuple.hpp
@@ -73,7 +73,7 @@ namespace std
 
 #if defined(BOOST_CLANG)
 # pragma clang diagnostic push
-# pragma clang diagnostic ignored "-Wmismatched-tags"
+  //# pragma clang diagnostic ignored "-Wmismatched-tags"
 #endif
 
 // std::tuple_size
diff --git a/inst/include/boost/type_traits/detail/has_prefix_operator.hpp b/inst/include/boost/type_traits/detail/has_prefix_operator.hpp
index 77818c20..f423e391 100644
--- a/inst/include/boost/type_traits/detail/has_prefix_operator.hpp
+++ b/inst/include/boost/type_traits/detail/has_prefix_operator.hpp
@@ -20,7 +20,7 @@
 
 #ifdef BOOST_GCC
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wdeprecated"
+//#pragma GCC diagnostic ignored "-Wdeprecated"
 #endif
 #if defined(BOOST_MSVC)
 #   pragma warning ( push )
diff --git a/inst/include/boost/type_traits/has_logical_not.hpp b/inst/include/boost/type_traits/has_logical_not.hpp
index d36858e1..9e0f7065 100644
--- a/inst/include/boost/type_traits/has_logical_not.hpp
+++ b/inst/include/boost/type_traits/has_logical_not.hpp
@@ -11,7 +11,7 @@
 
 #if defined(__GNUC__) && (__GNUC__*10000 + __GNUC_MINOR__*100 + __GNUC_PATCHLEVEL__ > 40800)
 #pragma GCC diagnostic push
-#pragma GCC diagnostic ignored "-Wunused-value"
+//#pragma GCC diagnostic ignored "-Wunused-value"
 #endif
 
 #define BOOST_TT_TRAIT_NAME has_logical_not
diff --git a/inst/include/boost/variant/get.hpp b/inst/include/boost/variant/get.hpp
index 62fca60c..0a81b67d 100644
--- a/inst/include/boost/variant/get.hpp
+++ b/inst/include/boost/variant/get.hpp
@@ -32,7 +32,7 @@ namespace boost {
 
 #if defined(BOOST_CLANG)
 #   pragma clang diagnostic push
-#   pragma clang diagnostic ignored "-Wweak-vtables"
+  //#   pragma clang diagnostic ignored "-Wweak-vtables"
 #endif
 //////////////////////////////////////////////////////////////////////////
 // class bad_get
diff --git a/inst/include/boost/winapi/detail/header.hpp b/inst/include/boost/winapi/detail/header.hpp
index c03c42a2..47376f4f 100644
--- a/inst/include/boost/winapi/detail/header.hpp
+++ b/inst/include/boost/winapi/detail/header.hpp
@@ -20,7 +20,7 @@
 
 #pragma GCC diagnostic push
 // ISO C++ 1998 does not support 'long long'
-#pragma GCC diagnostic ignored "-Wlong-long"
+//#pragma GCC diagnostic ignored "-Wlong-long"
 
 #endif
 
